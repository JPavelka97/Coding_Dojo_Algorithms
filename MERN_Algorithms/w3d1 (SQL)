/* 
  Given a table name string and an object whose key value pairs represent column names and values for the columns
  return a SQL insert statement string
  Tip: string interpolation (using back ticks, the key to the left of num 1 key) make it easy to add variables into a string or to add quotations without needing to escape them.
  Bonus: after solving it, write a 2nd solution focusing on functional programming using built in methods
*/

const table = 'users';
const insertData3 = { first_name: 'John', last_name: 'Doe' };
const expected3 =
  "INSERT INTO users (first_name, last_name) VALUES ('John', 'Doe');";

// Bonus:
const insertData4 = {
  first_name: 'John',
  last_name: 'Doe',
  age: 30,
  is_admin: false,
};
const expected4 =
  "INSERT INTO users (first_name, last_name, age, is_admin) VALUES ('John', 'Doe', 30, false);";
// Explanation: no quotes around the int or the bool, technically in SQL the bool would become a 0 or 1, but don't worry about that here.

/**
 * Generates a SQL insert statement from the inputs
 * - Time: O(?).
 * - Space: O(?).
 * @param {string} tableName
 * @param {Object} columnValuePairs
 * @returns {string} A string formatted as a SQL insert statement where the
 *    columns and values are extracted from columnValuePairs.
 */

function insert(tableName, columnValuePairs) {
    let keyArr = Object.keys(columnValuePairs);
    let valueArr = Object.values(columnValuePairs);

    const keyString = keyArr.join(', ');
    const valueString = valueArr.map(val => typeof val === 'string' ? `'${val}'` : val).join(', ');

    let expected = `INSERT INTO ${tableName} (${keyString}) VALUES (${valueString})`;
    return expected;
}

console.log(insert(table, insertData3));